use strict;
use warnings;
use Net::Telnet;
use C7::Cmd;

# Counters to keep track of total cross-connect create and deletes
my $successfully_completed_telnets = 0;


###########################################################################################################
#
# User Interface:
#
#
#
#

# This is the variable which will hold the TL1 command that the user will want to run on all C7s
print "\n\n\n\n\n";
print "=================================================================\n";
print "C7 Batch Mode Command Runner\n";
print "	Written 2-6-2013 by Jason Murphy\n";
print "=================================================================\n";
print "\n\n";
print "This script does the following:\n";
print "1: Reads in a list of C7 IPs from a text file named list.txt\n";
print "2: Telnets to every C7 and runs a retrieval\n";
print "3: Writes out and appends a text file tl1_logs.txt\n";
print "   ***Note that the C7 IPs must be listed one per line with no other\n";
print "      characters - i.e. no commas, quotes, exclamation marks, whatever.\n";
print "=================================================================\n";


#######################################################
# 
# Gather user input here on the TL1 command to run
#
print "Enter the TL1 command you want run (include the semi-colon!)\n";
print "Make certain you have the syntax correct!\n";
print ">";
my $command_to_run = <STDIN>;
chomp($command_to_run);
# convert it to lower-case
$command_to_run = lc($command_to_run);

#######################################################
# 
# Defensive programming in the event the user is malicious
#
# If user is malicious
if ( $command_to_run =~ m!init-sys!) {
		print "This is not permitted!\n";
		die;
}
if ( $command_to_run =~ m!dlt-!) {
		print "This is not permitted!\n";
		die;
}
if ( $command_to_run =~ m!ed-!) {
		print "This is not permitted!\n";
		die;
}

if ( $command_to_run =~ m!ent-!) {
		print "This is not permitted!\n";
		die;
}
if ( $command_to_run =~ m!opr-debug!) {
		print "This is not permitted!\n";
		die;
}
if ( $command_to_run =~ m!shell!) {
		print "This is not permitted!\n";
		die;
}


#
#
#
#######################################################



print "\n\nOff and running...\n";



# list.txt is the batch file that will list all the C7 IP addresses

###########################################################################################################
#
# Wrap the while stuff around the telnet stuff
#
# Jason's additions

###########################################################################################################
# File handle stuff for the batch input file
# The purpose of the list.txt file is to have a list of C7 IPs that will be read in - see the while loop below 
#
my $BATCH_FILE = 'list.txt';
# This is the read file - the source of all our info, etc:
open my $fh_BATCH, '<', $BATCH_FILE or die "Could not open $BATCH_FILE: $!\n";

# This variable will hold the current C7 that is being worked with
my $current_C7;


###########################################################################################################
# File handle stuff for the output file
#
#
 my $TL1_Output_File = 'TL1_Output.txt';		# This is the file handle stuff for writing out.
 my $fh_TL1_Output_File;						# File handle for T0 DELETES
 open $fh_TL1_Output_File, ">>", $TL1_Output_File or die "Couldn't open $TL1_Output_File: $!\n";
#
#
#
###########################################################################################################


###########################################################################################################
#
# The while loop that does all of the magic - it goes throught the $fh_BATCH one line at a time using the <> 
# operator and $current_C7 is set to the IP address of it.
#
#
while ($current_C7 = <$fh_BATCH> )
{
  chomp($current_C7);
			###########################################################################################################
			#
			# Telnet stuff
			#
			#
			#
			my $user_name = 'c7support';

			my $shell = C7::Cmd->new($current_C7, 23);
			$shell->connect;
			my ($date, $sid) = $shell->_getDateAndSid() ;
			$shell->disconnect;
			my $password = $shell->computeForgottenPassword( $date, $sid );

			print {$fh_TL1_Output_File}("===========================================================\n");
			print {$fh_TL1_Output_File}("Output for $current_C7");

			# A very key mapping occurs here where we map the telnet to the file handle $fh_TL1_Output_File
			my $t = new Net::Telnet ( Timeout=>30, Input_Log => $fh_TL1_Output_File);

			  #C7 IP/Hostname to open, change this to the one you want.
			$t->open($current_C7);

			  #Wait for prompt to appear;
			$t->waitfor('/>/ms');

			
			print "======================================\n";
			print "Logging into:\t$current_C7\n";
			  #Send default username/password (Not using cracker here)
			$t->send("ACT-USER::");
			$t->send($user_name);
			$t->send(":::");
			$t->send($password);
			$t->send(";");

			  #The actual return prompt is a semicolon at the end of the output, so wait for this
			$t->waitfor('/^;/ms');
			print "Logged into:\t$current_C7\n";

			# Inhibit Message All
			$t->send("INH-MSG-ALL;");
			$t->waitfor('/^;/ms');

			$t->timeout(undef);
			$t->send("$command_to_run");
			print "Sending: $command_to_run\n";  

			$t->waitfor('/^;/ms');

			$t->timeout(30);

			 #Logout
			$t->send('CANC-USER;');
			print "Logging out of:\t$current_C7\n";
			print "\n======================================\n\n";
			$t->close;

			print {$fh_TL1_Output_File}("===========================================================\n");
			
			$successfully_completed_telnets++;
			#
			#
			#
			#
			#
			###############################################################################################

}
close $fh_BATCH;
#
#
#
###########################################################################################################
  
  
			
###############################################################################################
#
# User Interface Stuff
#
print "===========================================================\n";
print "Results:\n";
print "	 # of C7s telnetted to:\t $successfully_completed_telnets\n";
print "===========================================================\n\n";
#
#
###############################################################################################





